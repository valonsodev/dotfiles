{{ warnf "dot_config/theming/executable_randombg.sh.tmpl\n" -}}

#!/bin/bash

# Exit on error
set -e

# Define base paths using Go template for chezmoi context
{{ $sourceDir := joinPath .chezmoi.sourceDir "dot_config" "theming" }}
SOURCE_DIR_THEMING="{{ $sourceDir }}"
WALLPAPER_BASE_DIR="${SOURCE_DIR_THEMING}/wallpapers" # Base for light/dark subdirs
LIGHT_WALLPAPERS_DIR="${WALLPAPER_BASE_DIR}/light"
DARK_WALLPAPERS_DIR="${WALLPAPER_BASE_DIR}/dark"

{{ $destDir := joinPath .chezmoi.homeDir ".config" "theming" }}
# Define the output file for the selected wallpaper
OUTPUT_WALLPAPER_FILE="{{ joinPath $destDir "wallpaper.png" }}"

# Define the material theme CLI path
MATERIAL_THEME_CLI="{{ joinPath .chezmoi.homeDir ".config" "theming" "material_theme" }}"

# --- Shell script logic starts here ---
light_mode=false
dark_mode=false

# Parse arguments
for arg in "$@"; do
  case $arg in
    --light)
      light_mode=true
      shift # Remove --light from processing
      ;;
    --dark)
      dark_mode=true
      shift # Remove --dark from processing
      ;;
    *)
      # You can add handling for unknown arguments here if needed
      # echo "Unknown argument: $arg"
      ;;
  esac
done

# Default to dark mode if no flags are provided or if both are somehow false after parsing
if ! $light_mode && ! $dark_mode; then
  echo "No mode specified, or invalid flag combination. Defaulting to --dark."
  dark_mode=true
  light_mode=false # Ensure light_mode is false if we default to dark
fi

declare -a search_paths
current_material_args=""

if $light_mode && $dark_mode; then
  echo "Searching for wallpapers in both light and dark directories."
  search_paths=("$LIGHT_WALLPAPERS_DIR" "$DARK_WALLPAPERS_DIR")
  # current_material_args will be determined based on the chosen wallpaper's path
elif $light_mode; then
  echo "Searching for light wallpapers in: $LIGHT_WALLPAPERS_DIR"
  search_paths=("$LIGHT_WALLPAPERS_DIR")
  current_material_args="--light"
elif $dark_mode; then
  echo "Searching for dark wallpapers in: $DARK_WALLPAPERS_DIR"
  search_paths=("$DARK_WALLPAPERS_DIR")
  current_material_args="--dark"
fi

# Select a random image
# Using -print0 and shuf -z -n 1 for safety with special filenames.
# Added common image extensions.
RANDOM_IMAGE=$(find "${search_paths[@]}" -type f \( -iname "*.jpg" -o -iname "*.jpeg" -o -iname "*.png" -o -iname "*.bmp" -o -iname "*.gif" -o -iname "*.webp" \) -print0 2>/dev/null | shuf -z -n 1 || true)

if [ -z "$RANDOM_IMAGE" ]; then
  echo "Error: No images found in the specified directories: ${search_paths[*]}"
  exit 1
fi

echo "Selected wallpaper: $RANDOM_IMAGE"

# Determine material_args if searching in both light and dark directories
if $light_mode && $dark_mode; then
  # Check if the RANDOM_IMAGE path contains the light or dark directory names
  # This assumes your light/dark directories are named 'light' and 'dark'
  if [[ "$RANDOM_IMAGE" == *"${LIGHT_WALLPAPERS_DIR}/"* ]]; then
    current_material_args="--light"
    echo "Determined theme: --light (from wallpaper path)"
  elif [[ "$RANDOM_IMAGE" == *"${DARK_WALLPAPERS_DIR}/"* ]]; then
    current_material_args="--dark"
    echo "Determined theme: --dark (from wallpaper path)"
  else
    # Fallback if path doesn't match expected subfolder structure clearly
    echo "Warning: Could not reliably determine theme from wallpaper path when searching both. Defaulting to --dark."
    current_material_args="--dark"
  fi
fi

# Copy the selected image to the output file location
echo "Copying '$RANDOM_IMAGE' to '$OUTPUT_WALLPAPER_FILE'"
cp "$RANDOM_IMAGE" "$OUTPUT_WALLPAPER_FILE"

chezmoi apply

echo "Script finished successfully."