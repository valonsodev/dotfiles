{{ warnf "dot_config/theming/executable_randombg.sh.tmpl\n" -}}

#!/bin/bash

# Exit on error
set -e

# Define paths using Go template variables for direct use in the script
{{- $lightWallpapersDir := joinPath .chezmoi.sourceDir "dot_config" "theming" "wallpapers" "light" -}}
{{- $darkWallpapersDir := joinPath .chezmoi.sourceDir "dot_config" "theming" "wallpapers" "dark" -}}
{{- $outputWallpaperFileBase := joinPath .chezmoi.homeDir ".config" "theming" "wallpaper" -}}

# --- Shell script logic starts here ---
light_mode=false
dark_mode=false

# Parse arguments
for arg in "$@"; do
  case $arg in
    --light)
      light_mode=true
      shift # Remove --light from processing
      ;;
    --dark)
      dark_mode=true
      shift # Remove --dark from processing
      ;;
    *)
      # You can add handling for unknown arguments here if needed
      # echo "Unknown argument: $arg"
      ;;
  esac
done

# Default to dark mode if no flags are provided or if both are somehow false after parsing
if ! $light_mode && ! $dark_mode; then
  echo "No mode specified, or invalid flag combination. Defaulting to --dark."
  dark_mode=true
  light_mode=false # Ensure light_mode is false if we default to dark
fi

declare -a search_paths

if $light_mode && $dark_mode; then
  echo "Searching for wallpapers in both light and dark directories."
  search_paths=("{{ $lightWallpapersDir }}" "{{ $darkWallpapersDir }}")
elif $light_mode; then
  echo "Searching for light wallpapers in: {{ $lightWallpapersDir }}"
  search_paths=("{{ $lightWallpapersDir }}")
elif $dark_mode; then
  echo "Searching for dark wallpapers in: {{ $darkWallpapersDir }}"
  search_paths=("{{ $darkWallpapersDir }}")
fi

# Select a random image
# Using -print0 and shuf -z -n 1 for safety with special filenames.
# Added common image extensions.
RANDOM_IMAGE=$(find "${search_paths[@]}" -type f \( -iname "*.jpg" -o -iname "*.jpeg" -o -iname "*.png" -o -iname "*.bmp" -o -iname "*.gif" -o -iname "*.webp" \) -print0 2>/dev/null | shuf -z -n 1 || true)

if [ -z "$RANDOM_IMAGE" ]; then
  echo "Error: No images found in the specified directories: ${search_paths[*]}"
  exit 1
fi

echo "Selected wallpaper: $RANDOM_IMAGE"

# Extract the extension from the selected wallpaper
extension="${RANDOM_IMAGE##*.}"
# Construct the actual output wallpaper filename with the original extension
ACTUAL_OUTPUT_WALLPAPER_FILE="{{ $outputWallpaperFileBase }}.${extension}"

# Copy the selected image to the output file location, preserving its extension
echo "Copying '$RANDOM_IMAGE' to '$ACTUAL_OUTPUT_WALLPAPER_FILE'"
matugen image "$RANDOM_IMAGE"